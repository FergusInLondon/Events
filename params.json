{
  "name": "Events",
  "tagline": "Events: A simple (and small) events registry and handling system",
  "body": "[![Build Status](https://travis-ci.org/FergusInLondon/Events.svg?branch=master)](https://travis-ci.org/FergusInLondon/Events)\r\n\r\nThis is an incredibly simple events registry and handling system, which is composed of a total of two objects: a registry object, and a subclassable base handler.\r\n\r\nThe primary intention behind this project was for a three part blog post about writing small modular components, packaging them as composer modules and subsequently using a continuous integration system to ensure their status.\r\n\r\nAlthough that was the original intention, if you need an incredibly lightweight system for registering and handling events, then this will most likely suffice!\r\n\r\n### Blog Post(s)\r\n\r\nThe blog posts are not yet written, but will be made available on [Fergus.London](https://fergus.london).\r\n\r\n## Example:\r\n\r\nThe best form of documentation is usually an example.\r\n\r\n### Basic\r\nA basic example could be a User registration/creation event, whereby when a user signs up to your application an event is fired that allows other parts of the application to respond in some way.\r\n\r\n\r\n\r\n```php\r\nuse FergusInLondon\\Events\\Registry;\r\nuse FergusInLondon\\Events\\Handler;\r\n\r\n$registry = new Registry();\r\n\r\n$registry->registerHandler(\"user.creation\", new Handler(function($user){\r\n\t$this->container->get('email')->sendWelcome( $user->email_address );\r\n}));\r\n\r\n$registry->registerHandler(\"\", new Handler(function($user){\r\n    $this->container->get('logger')->info(\r\n    \tsprintf(\"New user registration: %s (%d)\", $user->name, $user->id)\r\n    );\r\n}));\r\n```\r\n\r\nMeanwhile, in our associated controller we would simply trigger the event when required..\r\n\r\n```php\r\nclass UserController {\r\n\tpublic function create() {\r\n\t\t// ...\r\n\t\t$user->save();\r\n\t\t$registry->trigger(\"user.creation\", $user);\r\n\t\r\n\t}\r\n}\r\n\r\n\r\n```\r\n\r\n### Full API\r\n\r\nAlternatively, the example below demonstrates the entirety of the API and feature-set. There are public methods open on these objects which *should not be used*: and are there for `registry<->handler` communications. These methods will be marked as such in the source code.\r\n\r\n\r\n```php\r\nuse FergusInLondon\\Events\\Registry;\r\nuse FergusInLondon\\Events\\Handler;\r\n\r\n$registry = new Registry();\r\n\r\n// As Handler objects are - by default - initialised with a Callable parameter. This is overridable via subclassing.\r\n$registry->registerHandler(\"event.demo\", new Handler(function(){\r\n    echo \"See, this is a very simple event handler.\\n\";\r\n}));\r\n$registry->registerHandler(\"event.never\", new Handler(function(){\r\n    echo \"This will never run, as we'll clear all handlers first.\\n\";\r\n}));\r\n\r\n// Handlers can be instantiated inline, and access parameters passed in via Registry::trigger()\r\n$userDeleteHandler = new Handler(function($name, $id){\r\n    printf(\"User created: %s (%d)\\n\", $name, $id);\r\n});\r\n\r\n// Handlers also gain the context of the Handler object. Especially useful if you need to subclass and/or access utility methods.\r\n$userCreateHandler = new Handler(function($name, $id){\r\n\tprintf(\"User created: %s (%d)\\n\", $name, $id);\r\n\tprintf(\r\n\t    \"Handlers have access to the current Handler object too. (i.e %s)\",\r\n\t    $this->registryIdentifier\r\n\t);\r\n});\r\n\r\n\r\n// Registering instantiated handlers.\r\n$registry->registerHandler(\"user.create\", $userCreateHandler);\r\n$registry->registerHandler(\"user.delete\", $userDeleteHandler);\r\n\r\n// The clearHandlers method is capable of\r\n$registry->trigger(\"event.demo\");\r\n$registry->clearHandlers(\"event.demo\");\r\n$registry->trigger(\"event.demo\");\r\n\r\n// It's possible to trigger events whilst passing data to the handler\r\n$user = [\"name\" => \"J. Smith\", \"id\" => 101];\r\n$registry->trigger(\"user.create\", $user);\r\n$registry->trigger(\"user.delete\", $user);\r\n\r\n// If clearHandlers is called without any parameters, all handlers are cleared\r\n$registry->clearHandlers();\r\n$registry->trigger(\"event.never\");\r\n```\r\n\r\n## Testing\r\n\r\nTesting is done via PHPSpec, and tests that the public interface works as expected - but makes no guarantees as to the internal workings. As such, if you wish to use this project please stick to the public API as seen in the above example(s).\r\n\r\nA [full build history](https://travis-ci.org/FergusInLondon/Events/builds) for this project is available on Travis CI.\r\n\r\n## License\r\n\r\nAll code contained in this repository is licensed under **[The MIT License](https://opensource.org/licenses/MIT)**.\r\n\r\n> Copyright © 2016 Fergus Morrow <fergus@fergus.london>\r\n> \r\n> Permission is hereby granted, free of charge, to any person\r\nobtaining a copy of this software and associated documentation\r\nfiles (the “Software”), to deal in the Software without\r\nrestriction, including without limitation the rights to use,\r\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the\r\nSoftware is furnished to do so, subject to the following\r\nconditions:\r\n> \r\n> The above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n> \r\n> THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\r\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\nOTHER DEALINGS IN THE SOFTWARE.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}